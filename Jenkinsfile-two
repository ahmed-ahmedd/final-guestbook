pipeline {
    agent any

    environment {
        ANSIBLE_HOSTS = 'inventory.ini' 
        ANSIBLE_PLAYBOOK = 'deploy.yml' 
        SONARQUBE_PROJECT_KEY = 'guestbook'
        SONARQUBE_URL = 'http://localhost:9000'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/ahmed-ahmedd/guestbook.git'
            }
        }

        stage('Static Code Analysis (SAST)') {
            steps {
                withSonarQubeEnv('SonarQube') { // Use the configured SonarQube server in Jenkins
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=$SONARQUBE_URL
                    """
                }
            }
        }

        stage('Test Docker Environment') {
            steps {
                script {
                    echo 'üîç Checking Docker Installation...'
                    sh 'docker --version'
                    sh 'docker-compose --version'
                }
            }
        }

        stage('Security Scan for Docker Images') {
            steps {
                script {
                    echo 'üîç Running Trivy for Image Security Scan...'
                    sh 'trivy image guestbook:latest || echo "‚ö†Ô∏è Security vulnerabilities found!"'
                }
            }
        }

        stage('Run Ansible Tests') {
            steps {
                script {
                    echo 'üîç Running Ansible Tests...'
                    sh 'ansible-playbook -i $ANSIBLE_HOSTS test_docker.yml'
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    echo 'üöÄ Deploying with Ansible...'
                    sh 'ansible-playbook -i $ANSIBLE_HOSTS $ANSIBLE_PLAYBOOK'
                }
            }
        }
    }

    post {
        success {
            echo 'üéâ Deployment Successful!'
        }
        failure {
            echo '‚ùå Deployment Failed. Check logs!'
        }
    }
}
